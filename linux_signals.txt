signals are software interrupts ,they notify process about an event that has occured.
Signals are asyn in nature and can happend at any time.
A cpu, kernel, or any software that is running on cpu can trigger signals to the process. 
A process with enough permissions can send a signal to an other process.
A process can also send signals to itself.


TYPES OF SIGNALS
1.Terminal generated signals: signal generated by certain terminal keys
[ctrl+c --> the moment it is generated it sends and interrupt signal by name called as "sigint" is delivered by kernel to the process --> on receiveing sigint process terminates]

**linux signals have a naming convention they start with 3 characters SIG. Each and every signal is defined by a number provided in a headerfile called <signal.h>
Linux has two classifications of signals:
1.Standard aka traditional signals [Numbered from 1-31]
2.Real time signals [

HARDWARE EXCEPTION SIGNALS
Detected by hardware and then notify the kernel --> kernel will send signal to the appropriate process --> Process gets abnormally terminated.

SIGNALS FROM SOFTWARE POINT OF VIEW
(SIGURG1, SIGURG2)
1. When writer is writing but there is no reader to read through the pipe.
2. On calling alarm()

**Differentiate an interrupt and a signal

signal generation and signal delivery : Signal between these two is called pending signal, pending signal is now send to the process. On receiving the signals process has to do some action, so it can
		1.run some default action
		2.ignore a signal, 
		3.can also run a user defined function.
Instead of running a default action on delivery of a signal, a user can program a user-defined function and register with the kernel.
On delivery of a signal kernel should invoke the user-defined function instead of the default action.This procedure is called as signal handler using which we can define a user-defined function.For that we need to use a system call called as "SIGNALS".
sighandler_t *ptr signal(int sign,void *ptr) 
This is installing or establishing a signal handler in the kernel.

